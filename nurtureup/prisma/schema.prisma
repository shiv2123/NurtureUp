generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User accounts
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String?
  role            UserRole  @default(PARENT)
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  family          Family?   @relation(fields: [familyId], references: [id])
  familyId        String?
  childProfile    Child?
  parentProfile   Parent?
  sessions        Session[]
}

enum UserRole {
  PARENT
  CHILD
  CAREGIVER
}

// Family unit
model Family {
  id              String    @id @default(cuid())
  name            String
  timezone        String    @default("America/New_York")
  currency        String    @default("USD")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  users           User[]
  children        Child[]
  parents         Parent[]
  tasks           Task[]
  rewards         Reward[]
  milestones      Milestone[]
  challenges      Challenge[]
  settings        FamilySettings?
}

// Parent profile
model Parent {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyId        String
  family          Family    @relation(fields: [familyId], references: [id])
  isPrimary       Boolean   @default(false)
  
  // Preferences
  notifications   String    @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  createdTasks    Task[]
  approvedTasks   TaskCompletion[]
}

// Child profile
model Child {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyId        String
  family          Family    @relation(fields: [familyId], references: [id])
  
  // Profile
  nickname        String
  birthDate       DateTime
  avatar          String?
  theme           String    @default("candy")
  soundEnabled    Boolean   @default(true)
  
  // Gamification
  level           Int       @default(1)
  xp              Int       @default(0)
  totalStars      Int       @default(0)
  currentCoins    Int       @default(0)
  lifetimeCoins   Int       @default(0)
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  
  // Screen time
  dailyScreenMinutes     Int       @default(60)
  bonusScreenMinutes     Int       @default(0)
  usedScreenMinutes      Int       @default(0)
  lastScreenReset        DateTime  @default(now())
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  assignedTasks   Task[]
  completedTasks  TaskCompletion[]
  earnedBadges    BadgeEarned[]
  purchases       RewardPurchase[]
  pet             VirtualPet?
  learningScores  LearningScore[]
  moodEntries     MoodEntry[]
  financialTransactions FinancialTransaction[]
  schoolReadinessSkills SchoolReadinessSkill[]
  savingsGoals    SavingsGoal[]
  payoutRequests  PayoutRequest[]
  challengesFrom  Challenge[] @relation("ChallengeFrom")
  challengesTo    Challenge[] @relation("ChallengeTo")
  feedingLogs     FeedingLog[]
  sleepLogs       SleepLog[]
  diaperLogs      DiaperLog[]
  pottyLogs       PottyLog[]
  screenTimeLogs  ScreenTimeLog[]
  healthRecords   HealthRecord[]
}

// Tasks/Chores
model Task {
  id              String    @id @default(cuid())
  familyId        String
  family          Family    @relation(fields: [familyId], references: [id])
  createdById     String
  createdBy       Parent    @relation(fields: [createdById], references: [id])
  
  // Task details
  title           String
  description     String?
  icon            String?
  difficulty      Int       @default(1) // 1-5
  starValue       Int       @default(5)
  category        String?
  
  // Assignment
  assignedToId    String?
  assignedTo      Child?    @relation(fields: [assignedToId], references: [id])
  
  // Scheduling
  isRecurring     Boolean   @default(false)
  recurringRule   String?   // { type: 'daily' | 'weekly' | 'custom', days: number[] }
  dueDate         DateTime?
  
  // Status
  isActive        Boolean   @default(true)
  requiresProof   Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  completions     TaskCompletion[]
}

// Task completions
model TaskCompletion {
  id              String    @id @default(cuid())
  taskId          String
  task            Task      @relation(fields: [taskId], references: [id])
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Completion details
  completedAt     DateTime  @default(now())
  proofImage      String?
  notes           String?
  
  // Approval
  isApproved      Boolean   @default(false)
  approvedById    String?
  approvedBy      Parent?   @relation(fields: [approvedById], references: [id])
  approvedAt      DateTime?
  
  // Rewards
  starsAwarded    Int
  bonusStars      Int       @default(0)
  coinsAwarded    Int       @default(0)
  
  @@unique([taskId, childId, completedAt])
}

// Rewards marketplace
model Reward {
  id              String    @id @default(cuid())
  familyId        String
  family          Family    @relation(fields: [familyId], references: [id])
  
  // Reward details
  title           String
  description     String?
  image           String?
  category        String    // 'experience', 'item', 'privilege', 'screentime'
  coinCost        Int
  
  // Availability
  isActive        Boolean   @default(true)
  quantity        Int?      // null = unlimited
  expiresAt       DateTime?
  
  // Restrictions
  minAge          Int?
  maxAge          Int?
  requiresApproval Boolean  @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  purchases       RewardPurchase[]
}

// Reward purchases
model RewardPurchase {
  id              String    @id @default(cuid())
  rewardId        String
  reward          Reward    @relation(fields: [rewardId], references: [id])
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Purchase details
  purchasedAt     DateTime  @default(now())
  coinCost        Int
  
  // Redemption
  isRedeemed      Boolean   @default(false)
  redeemedAt      DateTime?
  
  // Notes
  notes           String?
}

// Badges system
model Badge {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String
  icon            String
  category        String    // 'streak', 'milestone', 'special'
  rarity          String    // 'bronze', 'silver', 'gold', 'legendary'
  
  // Unlock criteria
  criteria        String    // { type: 'streak_days', value: 7 }
  
  createdAt       DateTime  @default(now())
  
  // Relations
  earned          BadgeEarned[]
}

model BadgeEarned {
  id              String    @id @default(cuid())
  badgeId         String
  badge           Badge     @relation(fields: [badgeId], references: [id])
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  earnedAt        DateTime  @default(now())
  
  @@unique([badgeId, childId])
}

// Virtual Pet
model VirtualPet {
  id              String    @id @default(cuid())
  childId         String    @unique
  child           Child     @relation(fields: [childId], references: [id])
  
  // Pet details
  name            String
  type            String    @default("dragon") // dragon, unicorn, robot, etc.
  mood            String    @default("happy") // happy, neutral, sad, sleeping
  level           Int       @default(1)
  xp              Int       @default(0)
  
  // Care stats
  happiness       Int       @default(100) // 0-100
  energy          Int       @default(100) // 0-100
  lastFed         DateTime  @default(now())
  lastPlayed      DateTime  @default(now())
  
  // Customization (comma-separated for SQLite)
  accessories     String    @default("") // 'hat,glasses,scarf'
  color           String    @default("blue")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Family milestones/timeline
model Milestone {
  id              String    @id @default(cuid())
  familyId        String
  family          Family    @relation(fields: [familyId], references: [id])
  
  // Milestone details
  title           String
  description     String?
  date            DateTime
  category        String    // 'first', 'achievement', 'memory', 'quote'
  
  // Media (comma-separated for SQLite)
  images          String    @default("")
  
  // Metadata (comma-separated for SQLite)
  childrenIds     String    @default("")  // Comma-separated child IDs
  tags            String    @default("")  // Comma-separated tags
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Learning/Education tracking
model LearningScore {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Game session details
  subject         String    // 'phonics', 'numbers', 'shapes'
  gameId          String    // 'letter-sounds', 'count-to-10', etc.
  score           Int       // 0-100 game score
  xpEarned        Int       // XP earned from this session
  durationSeconds Int?      // How long the game session lasted
  
  // Additional metadata (JSON stored as string for SQLite)
  metadata        String?   // { difficulty: 'easy', attempts: 3, perfectScore: false }
  
  createdAt       DateTime  @default(now())
  
  @@index([childId, subject, createdAt])
  @@index([childId, gameId])
}

// Mood/Wellness tracking
model MoodEntry {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Core mood data
  moodScore       Int       // 1-10 scale
  notes           String?   // Optional text notes
  tags            String?   // Comma-separated tags (happy, sad, stressed, excited)
  
  // Additional wellness metrics (1-10 scale)
  energy          Int?      // Energy level
  stress          Int?      // Stress level  
  sleep           Int?      // Sleep quality
  socialInteraction Int?    // Social satisfaction
  
  // Context tracking
  activities      String?   // Comma-separated activities (school, sports, friends)
  triggers        String?   // Comma-separated triggers (homework, argument, success)
  
  // Timing
  loggedAt        DateTime  @default(now())
  createdAt       DateTime  @default(now())
  
  @@index([childId, loggedAt])
  @@index([childId, moodScore])
}

// Financial tracking
model FinancialTransaction {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Transaction details
  amount          Float     // Positive for earnings, negative for spending
  description     String
  category        String    // 'chores', 'stars', 'allowance', 'food', 'toys', 'treats', etc.
  notes           String?   // Optional detailed notes
  source          String    // 'manual', 'chores', 'stars', 'allowance', 'bonus'
  
  // Timing
  createdAt       DateTime  @default(now())
  
  @@index([childId, createdAt])
  @@index([childId, category])
}

// Savings goals
model SavingsGoal {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Goal details
  item            String    // What they're saving for
  targetAmount    Float     // Goal amount
  isActive        Boolean   @default(true)
  
  // Timing
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([childId, isActive])
}

// Payout requests (child requesting real money from parents)
model PayoutRequest {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Request details
  amount          Float
  notes           String?
  status          String    @default("pending") // 'pending', 'approved', 'rejected'
  
  // Approval tracking
  approvedById    String?   // Parent who approved/rejected
  approvedAt      DateTime?
  
  // Timing
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([childId, status])
}

// Challenges between family members
model Challenge {
  id              String    @id @default(cuid())
  familyId        String
  family          Family    @relation(fields: [familyId], references: [id])
  fromChildId     String
  fromChild       Child     @relation("ChallengeFrom", fields: [fromChildId], references: [id])
  toChildId       String
  toChild         Child     @relation("ChallengeTo", fields: [toChildId], references: [id])
  
  // Challenge details
  challengeText   String
  status          String    @default("pending_approval") // 'pending_approval', 'active', 'completed', 'rejected'
  
  // Results (when completed)
  winnerId        String?   // Child who won the challenge
  completedAt     DateTime?
  
  // Timing
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([familyId, status])
}

// Family settings
model FamilySettings {
  id              String    @id @default(cuid())
  familyId        String    @unique
  family          Family    @relation(fields: [familyId], references: [id])
  
  // Settings
  starToCoinsRatio Float    @default(10) // 10 stars = 1 coin
  dailyTaskLimit   Int?     // null = unlimited
  screenTimeRules  String   @default("{}")
  notificationPrefs String  @default("{}")
  
  // Features
  enableCommunity  Boolean  @default(false)
  enableLearning   Boolean  @default(true)
  enablePets       Boolean  @default(true)
  
  updatedAt       DateTime  @updatedAt
}

// Session management
model Session {
  id              String    @id @default(cuid())
  sessionToken    String    @unique
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires         DateTime
  
  @@index([userId])
}

// Infant Care Models (for parent dashboard tracking)

// Feeding logs for infants
model FeedingLog {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Feeding details
  type            String    // 'breast', 'bottle', 'formula', 'solid'
  amount          Float?    // in ml/oz
  duration        Int?      // in minutes (for breastfeeding)
  notes           String?
  
  // Timing
  startTime       DateTime  @default(now())
  endTime         DateTime?
  
  createdAt       DateTime  @default(now())
  
  @@index([childId, startTime])
}

// Sleep tracking for infants
model SleepLog {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Sleep details
  type            String    // 'nap', 'night', 'bedtime'
  quality         String?   // 'poor', 'fair', 'good', 'excellent'
  notes           String?
  
  // Timing
  startTime       DateTime
  endTime         DateTime?
  duration        Int?      // in minutes (calculated)
  
  createdAt       DateTime  @default(now())
  
  @@index([childId, startTime])
}

// Diaper change logs
model DiaperLog {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Diaper details
  type            String    // 'wet', 'dirty', 'both', 'dry'
  notes           String?
  
  // Timing
  changedAt       DateTime  @default(now())
  
  createdAt       DateTime  @default(now())
  
  @@index([childId, changedAt])
}

// Health records (doctor visits, vaccinations, growth)
model HealthRecord {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Record details
  type            String    // 'checkup', 'vaccination', 'growth', 'illness', 'milestone'
  title           String
  description     String?
  notes           String?
  
  // Health metrics (JSON stored as string for SQLite)
  metrics         String    @default("{}") // { weight: 12.5, height: 65, temperature: 98.6 }
  
  // Provider info
  provider        String?   // Doctor/clinic name
  nextAppointment DateTime?
  
  recordDate      DateTime  @default(now())
  createdAt       DateTime  @default(now())
  
  @@index([childId, recordDate])
}

// Potty training logs
model PottyLog {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Potty event details  
  type            String    // 'attempt', 'success', 'accident'
  notes           String?
  
  // Timing
  timestamp       DateTime  @default(now())
  
  // Tracking
  loggedById      String?   // Parent who logged it
  
  createdAt       DateTime  @default(now())
  
  @@index([childId, timestamp])
}

// Screen time tracking logs
model ScreenTimeLog {
  id              String    @id @default(cuid())
  childId         String
  child           Child     @relation(fields: [childId], references: [id])
  
  // Session details
  type            String    // 'session_start', 'session_end', 'limit_warning', 'limit_exceeded'
  app             String?   // App/interface being used
  durationMinutes Int?      // For session_end events
  sessionId       String?   // To match start/end events
  
  // Timing
  timestamp       DateTime  @default(now())
  
  // Additional info
  notes           String?
  
  createdAt       DateTime  @default(now())
  
  @@index([childId, timestamp])
  @@index([childId, type])
}

// School Readiness Assessment
model SchoolReadinessSkill {
  id          String    @id @default(cuid())
  childId     String
  category    String    // 'social', 'emotional', 'cognitive', 'physical', 'communication'
  skill       String    // Specific skill being assessed
  level       Int       // 1-4 scale (1=emerging, 2=developing, 3=proficient, 4=advanced)
  notes       String?
  assessedAt  DateTime  @default(now())
  assessedBy  String?   // User ID of who performed the assessment
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  child       Child     @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  @@unique([childId, category, skill])
}
